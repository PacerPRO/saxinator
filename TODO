Base values
-----------

A "base value" is one of:

1. nil
2. a value
3. a hash
4. an array



Result hashes
-------------

The result of any successful parse is a "result hash", which looks like this:

  { assignments..., values: [...] }

Here, "assignments" are assignments of keys to values, where the values are themselves "result hashes".
"values" is a single key assigned to an array of "base values."



Base result hashes
------------------

"Base values" are converted into "result hashes" (called "base result hashes") as follows:

1. nil     -> { values: []  }
2. x:value -> { values: [x] }
3. x:array -> { values: x   }
4. x:hash  -> { values: []  }.merge(x)



Combining result hashes
-----------------------

Result hashes can be combined when they occur sequentially (the results of parses of a 'td' block, for example), as
follows:

{ xassigns..., values: x } + { yassigns..., values: y } -> { xassigns.merge(yassigns), values: x + y }



Syntax examples
---------------

table do
  collect_results do
    tr do
      td do
        text 'hi'
      end
    end
  end
end

discard_results do
  tag 'table', id: /some-table/ do
    text 'hi'
    tag 'br'
    collect_results do
      text? 'there'
      text /, (.*)/, ->{ |s| "Mr. #{s}" }
      text 'I am '
      +text 'really '
      text 'happy you showed up'
    end
  end
end

collect_results do
  any do
    try { text 'hi'    }
    try { text 'there' }
  end
end



Ideas
-----

1. "get"

get :person do
  ...
end




---- Ken's syntax ----

table do
  tr+ -> [ date, description, amount ]
    td date: /{date_regex}/
    td description: /.+/
    td amount: /\$(\d+\.\d{2})/, capture: 1

[
 [ date, description, amount],
 [ date, description, amount],
 [ date, description, amount],
 [ date, description, amount],
 ...
 { total: 1000.40 }
]

saxish = <<-SAXISH
table
  thead?
  tbody?
    tr
      td /Date/
      td /Description/
      td /Amount/
    tr+ (a)-> [ date, description, amount ]
      td date: /{date_regex}/
      td description: /.+/
      td amount: /\$(\d+\.\d{2})/, capture: 1
    tr (b)-> { "total" => total }
      td
      td /Total/
      td total: /\$(\d+\.\d{2})/, capture: 1
SAXISH

callbacks = {
  a: ->(thing) { $stderr.puts thing }
  b: ->(total_thing) { puts "Total: {%total%}", total_thing }
}
document = Saxinator.new(saxish, callbacks)
