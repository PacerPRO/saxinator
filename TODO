Collecting results
------------------

By default, Saxinator parsers do *not* return values for successfully parsed blocks of code, although they do execute
side-effects. This is to prevent large data structures from being built up and consuming lots of memory. Results are
only built up and returned if they are inside a "collect_results" block, e.g.:

collect_results do
  ...
end

Within a "collect_results" block, the user may disable the collecting of results for a particular sub-parse, e.g.:

discard_results do
  ...
end

It is a good idea to do this even if you don't explicitly specify any return results within "...", as certain
combinators may return default values, which causing partial return results to be built up anyway (even though they are
ultimately dropped). Wrapping "discard_results" around a block prevents the results from being built up in the first
place.

You may nest "collect_results" and "discard_results" arbitrarily, as deeply as you please.



Base values
-----------

A "base value" is one of:

1. nil
2. a value
3. a hash
4. an array



Result hashes
-------------

The result of any successful parse is a "result hash", which looks like this:

  { assignments..., values: [...] }

Here, "assignments" are assignments of keys to values, where the values are themselves "result hashes".
"values" is a single key assigned to an array of "base values."



Base result hashes
------------------

"Base values" are converted into "result hashes" (called "base result hashes") as follows:

1. nil     -> { values: []  }
2. x:value -> { values: [x] }
3. x:array -> { values: x   }
4. x:hash  -> { values: []  }.merge(x)



Combining result hashes
-----------------------

Result hashes are combined when they occur sequentially (the results of parses of a 'td' block, for example), as
follows:

{ xassigns..., values: x } + { yassigns..., values: y } -> { xassigns.merge(yassigns), values: x + y }



Result hash examples
--------------------

1.

text 'hello (there)'
-->
{ values: [] }

2.

text 'hello (there)', -> { |matches| matches[1] }
-->
{ values: ['there'] }

3.

tag 'td' do
  text 'hello', -> { |matches| matches[0] }
  text 'there', -> { |matches| matches[0] }
end
-->
{ values: ['hello', 'there'] }

4.

tag 'td' do, -> { |x| x }
  text 'hello', -> { |matches| matches[0] }
  text 'there', -> { |matches| matches[0] }
end
-->
{ values: ['hello', 'there'] }

5.

tag 'td' do, -> { |x| { words: x } }
  text 'hello', -> { |matches| matches[0] }
  text 'there', -> { |matches| matches[0] }
end
-->
{ words: { values: ['hello', 'there'] }, values: [] }

6.

star do
  text 'hello', -> { |matches| matches[0] }
end
-->
{ values: ['hello', 'hello', 'hello'] }



Syntax examples
---------------

table do
  collect_results do
    tr do
      td do
        text 'hi'
      end
    end
  end
end

discard_results do
  tag 'table', id: /some-table/ do
    text 'hi'
    tag 'br'
    collect_results do
      text? 'there'
      text /, (.*)/, ->{ |s| "Mr. #{s}" }
      text 'I am '
      +text 'really '
      text 'happy you showed up'
    end
  end
end

collect_results do
  any do
    try { text 'hi'    }
    try { text 'there' }
  end
end



Ideas
-----

1. "get" (maybe not needed in light of 2, but seems like easy-to-understand syntax ...)

get :person do
  ...
end

2. curried helper functions for return results:

tag 'td' do, as(:person)
  text 'hello', -> { |matches| matches[0] }
  text 'there', -> { |matches| matches[0] }
end
-->
{ person: { values: ['hello', 'there'] }, values: [] }

(NOTE: as(:person) translates into -> { |x| { person: x, values: [] } }



---- Ken's syntax ----

table do
  tr+ -> [ date, description, amount ]
    td date: /{date_regex}/
    td description: /.+/
    td amount: /\$(\d+\.\d{2})/, capture: 1

[
 [ date, description, amount],
 [ date, description, amount],
 [ date, description, amount],
 [ date, description, amount],
 ...
 { total: 1000.40 }
]

saxish = <<-SAXISH
table
  thead?
  tbody?
    tr
      td /Date/
      td /Description/
      td /Amount/
    tr+ (a)-> [ date, description, amount ]
      td date: /{date_regex}/
      td description: /.+/
      td amount: /\$(\d+\.\d{2})/, capture: 1
    tr (b)-> { "total" => total }
      td
      td /Total/
      td total: /\$(\d+\.\d{2})/, capture: 1
SAXISH

callbacks = {
  a: ->(thing) { $stderr.puts thing }
  b: ->(total_thing) { puts "Total: {%total%}", total_thing }
}
document = Saxinator.new(saxish, callbacks)
